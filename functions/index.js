// functions/index.js
const {onDocumentCreated} = require('firebase-functions/v2/firestore');
const {initializeApp} = require('firebase-admin/app');
const {getFirestore} = require('firebase-admin/firestore');
const axios = require('axios');

initializeApp();
const db = getFirestore();

// *** ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ Channel Access Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≤‡∏Å Line Messaging API ***
const LINE_CHANNEL_ACCESS_TOKEN = 'NlqE6Z+IQZCUdMxf5mUSLkJ/1AcbV2uY50KrtnrN7wJ9UQgrOmAFMXVoRnyNiDeccUvbZesi5sN3qyOKWcEiPCPHRdmJdSJ6oN8A+OfIrBr0c23i4RajjytwTi1c5fULL2zQ2yPZEJNS1OEqDh9L+gdB04t89/1O/w1cDnyilFU=';

// *** ‡πÉ‡∏™‡πà User ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ***
const NOTIFICATION_USER_ID = 'U412269167a85d5416b4a25b63b1cd2ce'; // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô friend ‡∏Ç‡∏≠‡∏á bot

// Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Line Token
exports.testLineToken = require('firebase-functions').https.onRequest(async (req, res) => {
    try {
        console.log('Testing Line Messaging API Token...');
        
        const response = await axios.post(
            'https://api.line.me/v2/bot/message/push',
            {
                to: NOTIFICATION_USER_ID,
                messages: [
                    {
                        type: 'text',
                        text: 'üß™ Testing Line Messaging API Token from Firebase Functions\nüìÖ ' + new Date().toLocaleString('th-TH')
                    }
                ]
            },
            {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
                }
            }
        );
        
        res.json({
            success: true,
            message: 'Token is valid!',
            status: response.status,
            data: response.data
        });
        
    } catch (error) {
        console.error('Token test failed:', error.message);
        
        res.status(500).json({
            success: false,
            message: 'Token test failed',
            error: error.message,
            status: error.response?.status,
            data: error.response?.data
        });
    }
});

exports.sendLineNotification = onDocumentCreated(
    'sensor_readings/{docId}',
    async (event) => {
        const snap = event.data;
        if (!snap) {
            console.log('No data associated with the event');
            return;
        }
        
        const data = snap.data();
        console.log('Function triggered: New sensor data received:', data);

        let message = '\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≥:\n';
        let hasAlert = false;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ pH
        if (data.ph_value === undefined) {
            console.warn('pH value is undefined in data.');
            message += `‚ùì pH: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n`;
        } else if (data.ph_value < 6.0 || data.ph_value > 8.0) {
            message += `‚ö†Ô∏è pH: ${data.ph_value} (‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥!)\n`;
            hasAlert = true;
        } else {
            message += `‚úÖ pH: ${data.ph_value} (‡∏õ‡∏Å‡∏ï‡∏¥)\n`;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ TDS
        if (data.tds_value === undefined) {
            console.warn('TDS value is undefined in data.');
            message += `‚ùì TDS: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n`;
        } else if (data.tds_value > 500) { // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 500 ppm ‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            message += `‚ö†Ô∏è TDS: ${data.tds_value} ppm (‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥!)\n`;
            hasAlert = true;
        } else {
            message += `‚úÖ TDS: ${data.tds_value} ppm (‡∏õ‡∏Å‡∏ï‡∏¥)\n`;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ Turbidity
        if (data.turbidity_value === undefined) {
            console.warn('Turbidity value is undefined in data.');
            message += `‚ùì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∏‡πà‡∏ô: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n`;
        } else if (data.turbidity_value > 50) { // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 50 NTU ‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            message += `‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∏‡πà‡∏ô: ${data.turbidity_value} NTU (‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥!)\n`;
            hasAlert = true;
        } else {
            message += `‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∏‡πà‡∏ô: ${data.turbidity_value} NTU (‡∏õ‡∏Å‡∏ï‡∏¥)\n`;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ Temperature
        if (data.temperature_value === undefined) {
            console.warn('Temperature value is undefined in data.');
            message += `‚ùì ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n`;
        } else if (data.temperature_value < 20 || data.temperature_value > 30) { // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 20 ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 30 ‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            message += `‚ö†Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${data.temperature_value}¬∞C (‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥!)\n`;
            hasAlert = true;
        } else {
            message += `‚úÖ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${data.temperature_value}¬∞C (‡∏õ‡∏Å‡∏ï‡∏¥)\n`;
        }


        if (!hasAlert) {
            message += '‚ú® ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥\n';
        }

        console.log('Generated Line message content:', message); // Log ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏õ‡∏Å‡∏ï‡∏¥" ‡πÑ‡∏õ Line, ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ return ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
        // if (!hasAlert) {
        //     console.log('No alerts. Not sending notification.');
        //     return null;
        // }

        try {
            console.log('Attempting to send Line message...'); // Log ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
            const response = await axios.post(
                'https://api.line.me/v2/bot/message/push',
                {
                    to: NOTIFICATION_USER_ID,
                    messages: [
                        {
                            type: 'text',
                            text: message
                        }
                    ]
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
                    }
                }
            );
            console.log('Line message sent successfully! Response status:', response.status); // Log ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            return null;
        } catch (error) {
            console.error('Error sending Line message:', error.message); // Log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            if (error.response) {
                console.error('Line API Response Data:', error.response.data); // Log ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å Line API
                console.error('Line API Response Status:', error.response.status);
            }
            return null;
        }
    });