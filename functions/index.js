// functions/index.js
const {onDocumentCreated} = require('firebase-functions/v2/firestore');
const {onSchedule} = require('firebase-functions/v2/scheduler');
const {initializeApp} = require('firebase-admin/app');
const {getFirestore} = require('firebase-admin/firestore');
const axios = require('axios');

initializeApp();
const db = getFirestore();

// *** ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ Channel Access Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≤‡∏Å Line Messaging API ***
const LINE_CHANNEL_ACCESS_TOKEN = 'I1U9ooH9bbG6vg1Q5dKbZ+36Ytg/zpmlYBwSa7WxGST1Njcmw6v9IBn+iSBzipIBc6cD/3mSptI5TY8atYMW4wqfSBp57gCc70u4tetEkHK5MV4zHnddazJKgYOK27MTgdAmj+lEH/3B2ikjWKxuPAdB04t89/1O/w1cDnyilFU='; // ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å Line Developers Console

// *** ‡πÉ‡∏™‡πà User ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ***
const NOTIFICATION_USER_ID = 'Ufe4ea81fc5c77cd84c1f7a8b61fd51ae'; // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô friend ‡∏Ç‡∏≠‡∏á bot

// Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Line Token
exports.testLineToken = require('firebase-functions').https.onRequest(async (req, res) => {
    try {
        console.log('Testing Line Messaging API Token...');
        
        const response = await axios.post(
            'https://api.line.me/v2/bot/message/push',
            {
                to: NOTIFICATION_USER_ID,
                messages: [
                    {
                        type: 'text',
                        text: 'üß™ Testing Line Messaging API Token from Firebase Functions\nüìÖ ' + new Date().toLocaleString('th-TH')
                    }
                ]
            },
            {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
                }
            }
        );
        
        res.json({
            success: true,
            message: 'Token is valid!',
            status: response.status,
            data: response.data
        });
        
    } catch (error) {
        console.error('Token test failed:', error.message);
        
        res.status(500).json({
            success: false,
            message: 'Token test failed',
            error: error.message,
            status: error.response?.status,
            data: error.response?.data
        });
    }
});

// Line Notification System - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô HTTP Function
exports.sendLineNotification = require('firebase-functions').https.onRequest(async (req, res) => {
    try {
        console.log('Line notification function triggered');
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Firestore
        const snapshot = await db.collection('sensor_readings')
            .orderBy('timestamp', 'desc')
            .limit(1)
            .get();

        if (snapshot.empty) {
            console.log('No sensor data found');
            return res.status(404).json({
                success: false,
                message: 'No sensor data found'
            });
        }

        const doc = snapshot.docs[0];
        const data = doc.data();
        const docId = doc.id;
        
        console.log('üìä Latest sensor data:', JSON.stringify(data, null, 2));

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        let message = `üåä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≥ Aquagreen AI\n`;
        message += `üìÖ ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}\n`;
        message += `üÜî Document ID: ${docId}\n\n`;
        let hasAlert = false;

        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á field name ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà
        const ph = data.ph_value || data.ph;
        const tds = data.tds_value || data.tds;
        const turbidity = data.turbidity_value || data.turbidity;
        const temperature = data.temperature_value || data.temperature;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ pH
        if (ph === undefined || ph === null) {
            console.warn('pH value is undefined in data.');
            message += `‚ùì pH: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n`;
            hasAlert = true;
        } else if (ph < 6.0 || ph > 8.0) {
            message += `‚ö†Ô∏è pH: ${ph.toFixed(2)} (‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥! ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 6.0-8.0)\n`;
            hasAlert = true;
        } else {
            message += `‚úÖ pH: ${ph.toFixed(2)} (‡∏õ‡∏Å‡∏ï‡∏¥)\n`;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ TDS
        if (tds === undefined || tds === null) {
            console.warn('TDS value is undefined in data.');
            message += `‚ùì TDS: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n`;
            hasAlert = true;
        } else if (tds > 400) { // ‡πÄ‡∏Å‡∏¥‡∏ô 400 ppm ‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            message += `‚ö†Ô∏è TDS: ${tds.toFixed(1)} ppm (‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ! ‡∏Ñ‡∏ß‡∏£‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 400 ppm)\n`;
            hasAlert = true;
        } else {
            message += `‚úÖ TDS: ${tds.toFixed(1)} ppm (‡∏õ‡∏Å‡∏ï‡∏¥)\n`;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ Turbidity
        if (turbidity === undefined || turbidity === null) {
            console.warn('Turbidity value is undefined in data.');
            message += `‚ùì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∏‡πà‡∏ô: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n`;
            hasAlert = true;
        } else if (turbidity > 50) { // ‡πÄ‡∏Å‡∏¥‡∏ô 40 NTU ‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            message += `‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∏‡πà‡∏ô: ${turbidity.toFixed(1)} NTU (‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ! ‡∏Ñ‡∏ß‡∏£‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 40 NTU)\n`;
            hasAlert = true;
        } else {
            message += `‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∏‡πà‡∏ô: ${turbidity.toFixed(1)} NTU (‡∏õ‡∏Å‡∏ï‡∏¥)\n`;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ Temperature
        if (temperature === undefined || temperature === null) {
            console.warn('Temperature value is undefined in data.');
            message += `‚ùì ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n`;
            hasAlert = true;
        } else if (temperature < 20 || temperature > 35) { // ‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á 20-35¬∞C ‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            message += `‚ö†Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temperature.toFixed(1)}¬∞C (‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥! ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 20-35¬∞C)\n`;
            hasAlert = true;
        } else {
            message += `‚úÖ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temperature.toFixed(1)}¬∞C (‡∏õ‡∏Å‡∏ï‡∏¥)\n`;
        }


        // ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        if (!hasAlert) {
            message += '\nüéâ ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥!\n';
            message += '‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Firebase\n';
        } else {
            message += '\nüö® ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!\n';
            message += '‚ö° ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å Firebase\n';
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        if (data.location || data.device_id) {
            message += '\nüìç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:\n';
            if (data.location) message += `üè† ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${data.location}\n`;
            if (data.device_id) message += `üîß ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ${data.device_id}\n`;
        }

        // Log ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
        console.log('üì± Line message content:', message);
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Line
        const startTime = Date.now();
        
        const response = await axios.post(
            'https://api.line.me/v2/bot/message/push',
            {
                to: NOTIFICATION_USER_ID,
                messages: [
                    {
                        type: 'text',
                        text: message
                    }
                ]
            },
            {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
                },
                timeout: 10000 // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ timeout
            }
        );
        
        const responseTime = Date.now() - startTime;
        console.log(`‚úÖ Line message sent successfully! Response status: ${response.status}, Time: ${responseTime}ms`);
        
        res.json({
            success: true,
            message: 'Line notification sent successfully',
            status: response.status,
            responseTime: responseTime + 'ms',
            data: data
        });
        
    } catch (error) {
        console.error('‚ùå Error sending Line message:', error.message);
        
        res.status(500).json({
            success: false,
            message: 'Failed to send Line notification',
            error: error.message,
            status: error.response?.status,
            data: error.response?.data
        });
    }
});


// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß! 
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Arduino ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

exports.scheduledLineNotification = onSchedule('* * * * *', async (event) => {
    try {
        console.log('‚è∞ Scheduled Line notification triggered (every minute)');
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Firestore
        const scheduledSnapshot = await db.collection('sensor_readings')
            .orderBy('timestamp', 'desc')
            .limit(1)
            .get();

        if (scheduledSnapshot.empty) {
            console.log('üì≠ No sensor data found - Arduino ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            return;
        }

        const scheduledDoc = scheduledSnapshot.docs[0];
        const scheduledData = scheduledDoc.data();
        const scheduledDocId = scheduledDoc.id;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2 ‡∏ô‡∏≤‡∏ó‡∏µ)
        const timestamp = scheduledData.timestamp;
        let dataTime;
        
        if (timestamp && timestamp.toDate) {
            dataTime = timestamp.toDate();
        } else if (timestamp && typeof timestamp === 'string') {
            dataTime = new Date(timestamp);
        } else {
            dataTime = new Date();
        }
        
        const now = new Date();
        const timeDiff = (now.getTime() - dataTime.getTime()) / (1000 * 60); // ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏≤‡∏ó‡∏µ
        
        console.log(`üìä Latest data timestamp: ${dataTime.toLocaleString('th-TH')}`);
        console.log(`‚è±Ô∏è Time difference: ${timeDiff.toFixed(1)} minutes ago`);
        
        // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ Arduino ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if (timeDiff > 5) {
            console.log('‚ö†Ô∏è Arduino data is too old, skipping notification');
            return;
        }
        
        console.log('üìä Fresh Arduino data detected, sending notification...');
        console.log('üìä Latest sensor data:', JSON.stringify(scheduledData, null, 2));

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ
        let message = `üåä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≥ Aquagreen AI (‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ)\n`;
        message += `üìÖ ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}\n`;
        message += `üÜî Document ID: ${scheduledDocId}\n\n`;
        let hasAlert = false;

        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á field name ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà
        const ph = scheduledData.ph_value || scheduledData.ph;
        const tds = scheduledData.tds_value || scheduledData.tds;
        const turbidity = scheduledData.turbidity_value || scheduledData.turbidity;
        const temperature = scheduledData.temperature_value || scheduledData.temperature;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö function ‡∏õ‡∏Å‡∏ï‡∏¥)
        if (ph === undefined || ph === null) {
            message += `‚ùì pH: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n`;
            hasAlert = true;
        } else if (ph < 6.0 || ph > 8.0) {
            message += `‚ö†Ô∏è pH: ${ph.toFixed(2)} (‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥! ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 6.0-8.0)\n`;
            hasAlert = true;
        } else {
            message += `‚úÖ pH: ${ph.toFixed(2)} (‡∏õ‡∏Å‡∏ï‡∏¥)\n`;
        }

        if (tds === undefined || tds === null) {
            message += `‚ùì TDS: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n`;
            hasAlert = true;
        } else if (tds > 400) {
            message += `‚ö†Ô∏è TDS: ${tds.toFixed(1)} ppm (‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ! ‡∏Ñ‡∏ß‡∏£‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 400 ppm)\n`;
            hasAlert = true;
        } else {
            message += `‚úÖ TDS: ${tds.toFixed(1)} ppm (‡∏õ‡∏Å‡∏ï‡∏¥)\n`;
        }

        if (turbidity === undefined || turbidity === null) {
            message += `‚ùì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∏‡πà‡∏ô: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n`;
            hasAlert = true;
        } else if (turbidity > 50) {
            message += `‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∏‡πà‡∏ô: ${turbidity.toFixed(1)} NTU (‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ! ‡∏Ñ‡∏ß‡∏£‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 40 NTU)\n`;
            hasAlert = true;
        } else {
            message += `‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∏‡πà‡∏ô: ${turbidity.toFixed(1)} NTU (‡∏õ‡∏Å‡∏ï‡∏¥)\n`;
        }

        if (temperature === undefined || temperature === null) {
            message += `‚ùì ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n`;
            hasAlert = true;
        } else if (temperature < 20 || temperature > 35) {
            message += `‚ö†Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temperature.toFixed(1)}¬∞C (‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥! ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 20-35¬∞C)\n`;
            hasAlert = true;
        } else {
            message += `‚úÖ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temperature.toFixed(1)}¬∞C (‡∏õ‡∏Å‡∏ï‡∏¥)\n`;
        }

        // ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ
        if (!hasAlert) {
            message += '\nüéâ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ: ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥!\n';
            message += '‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å Firebase\n';
        } else {
            message += '\nüö® ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ: ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö!\n';
            message += '‚ö° ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å Firebase\n';
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        if (scheduledData.location || scheduledData.device_id) {
            message += '\nüìç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:\n';
            if (scheduledData.location) message += `üè† ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${scheduledData.location}\n`;
            if (scheduledData.device_id) message += `üîß ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ${scheduledData.device_id}\n`;
        }

        console.log('üì± Scheduled Line message content (every minute):', message);
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Line
        const response = await axios.post(
            'https://api.line.me/v2/bot/message/push',
            {
                to: NOTIFICATION_USER_ID,
                messages: [
                    {
                        type: 'text',
                        text: message
                    }
                ]
            },
            {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
                },
                timeout: 10000
            }
        );
        
        console.log(`‚úÖ Scheduled Line message sent successfully (every minute)! Response status: ${response.status}`);
        
    } catch (error) {
        console.error('‚ùå Error sending scheduled Line message:', error.message);
    }
});
